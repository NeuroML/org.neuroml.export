# Main NetPyNE script for: $name

# See https://github.com/Neurosim-lab/netpyne

from netpyne import specs  # import netpyne specs module
from netpyne import sim    # import netpyne sim module

from neuron import h


#[[###############################################################################]]#
# NETWORK PARAMETERS
#[[###############################################################################]]#

nml2_file_name = '${main_network_file}'

#[[###############################################################################]]#
# SIMULATION PARAMETERS
#[[###############################################################################]]#

simConfig = specs.SimConfig()   # object of class SimConfig to store the simulation configuration

# Simulation parameters
simConfig.duration = simConfig.tstop = $t_end # Duration of the simulation, in ms
simConfig.dt = $dt # Internal integration timestep to use
simConfig.randseed = 1 # Random seed to use
simConfig.createNEURONObj = 1  # create HOC objects when instantiating network
simConfig.createPyStruct = 1  # create Python structure (simulator-independent) when instantiating network
simConfig.verbose = True  # show detailed messages 
#if ($temperature)
simConfig.hParams['celsius'] = ($temperature - 273.15)
#end

# Recording 
simConfig.recordCells = ['all']  
simConfig.recordTraces = {}

#foreach ($of in $output_file )
# For saving to file: $of.file_name (ref: $of.name)
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; segment id: $oc.segment_id; segment name: $oc.segment_name; value: $oc.variable ($oc.neuron_variable_name)
simConfig.recordTraces['${of.name}_${oc.population}_${oc.population_index}_${oc.segment_name}_${oc.neuron_variable_name}'] = {'sec':'$oc.segment_name','loc':0.5,'var':'$oc.neuron_variable_name'}
#end
#end
#end


simConfig.plotCells = ['all']


simConfig.recordStim = True  # record spikes of cell stims
simConfig.recordStep = simConfig.dt # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting 
simConfig.plotRaster = True # Whether or not to plot a raster
simConfig.plotLFPSpectrum = False # plot power spectral density
simConfig.maxspikestoplot = 3e8 # Maximum number of spikes to plot
simConfig.plotConn = False # whether to plot conn matrix
simConfig.plotWeightChanges = False # whether to plot weight changes (shown in conn matrix)
#simConfig.plot3dArch = True # plot 3d architecture

# Saving
simConfig.filename = '${name}.txt'  # Set file output name
simConfig.saveFileStep = simConfig.dt # step size in ms to save data to disk
# simConfig.saveDat = True # save to dat file


#[[###############################################################################]]#
# IMPORT & RUN
#[[###############################################################################]]#

print("Running a NetPyNE based simulation for %sms (dt: %sms) at %s degC"%(simConfig.duration, simConfig.dt, h.celsius))

gids = sim.importNeuroML2SimulateAnalyze(nml2_file_name,simConfig)

print("Finished simulation")


#[[###############################################################################]]#
#   Saving data (this ensures the data gets saved in the format/files 
#   as specified in the LEMS <Simulation> element)
#[[###############################################################################]]#


#foreach ($of in $output_file )
print("Saving to file: $of.file_name (ref: $of.name)")

 
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; segment id: $oc.segment_id; segment name: $oc.segment_name; value: $oc.variable
col_${of.name}_$oc.name = sim.allSimData['${of.name}_${oc.population}_${oc.population_index}_${oc.segment_name}_${oc.neuron_variable_name}']['cell_%s'%gids['${oc.population}'][$oc.population_index]]

#else
# Column: $oc.name
col_${of.name}_$oc.name = [i*simConfig.dt for i in range(int(simConfig.duration/simConfig.dt))]

#end
#end

dat_file_$of.name = open('$of.file_name', 'w')
for i in range(len(col_${of.name}_t)):
    dat_file_${of.name}.write(#foreach ($oc in $of.output_columns ) '%s\t'%(col_${of.name}_${oc.name}[i]/${oc.neuron_variable_scale}) + #end '\n')
dat_file_${of.name}.close()

#end

print("Saved all data.")
