# Main NetPyNE script for: $name

from netpyne import init  # import netpyne init module

netParams = {}  # dictionary to store sets of network parameters


###############################################################################
# NETWORK PARAMETERS
###############################################################################

# Cell properties list
netParams['cellParams'] = []

next_gid = 0
gids = {} # Require here for plotting etc.


#foreach ($pop in $populations.keySet() )
#foreach ($pop_element in $populations.get($pop).keySet())
#if ($pop_element=="component")
#set($component_array=$populations.get($pop).get($pop_element))
#foreach ($component_element in $component_array.keySet())
#if ($component_element=="parameters")
#set($parameters_array=$component_array.get($component_element))

# cell params for $component_array.name
cellRule = {'label': '$pop', 'conditions': {'cellType': '$component_array.name'}, 'sections': {}}
${pop}_soma = {'geom': {}, 'topol': {}, 'mechs': {}, 'pointps':{}, 'syns': {}}  #  soma
${pop}_soma['geom'] = {'diam': 10, 'L': 10, 'Ra': 1, 'cm': 31.8309886}
${pop}_soma['pointps']['$component_array.name'] = { '_type':'$component_array.name',#foreach($parameter in $parameters_array.keySet()) '$parameter':$parameters_array.get($parameter), #end } 

cellRule['sections'] = {'soma': ${pop}_soma}  # add sections to dict
netParams['cellParams'].append(cellRule)  # add dict to list of cell properties


#end
#end
#end
#end
#end



# Population parameters
netParams['popParams'] = []  # create list of populations - each item will contain dict with pop params

#foreach ($pop in $populations.keySet() )
#set($pop_size=$populations.get($pop).size)
#set($pop_component=$populations.get($pop).component.name)

# Population: $pop, size: $pop_size, component: $pop_component

size_$pop = $pop_size
netParams['popParams'].append({'popLabel': '$pop', 'cellModel': '$pop', 'cellType': '$pop_component', 'numCells': size_$pop}) # add dict with params for this pop 
gids['$pop'] = [i+next_gid for i in range(size_$pop)]
next_gid += size_$pop

#end





# Inputs...
#foreach ($input_ref in $inputs.keySet() )
#set($input=$inputs.get($input_ref))
# Input: $input_ref

${input.population}_soma['pointps']['${input_ref}'] = { '_type':'${input_ref}' } 


###from ${input_ref}_inputdefinition import ${input_ref}
##${input_ref}_${input.population}_${input.population_index} = ${input_ref}( #foreach($p in $input.component.parameters.keySet()) $p=$input.component.parameters.get($p), #end )
##${input_ref}_${input.population}_${input.population_index}.inject_into([${input.population}[${input.population_index}]])
#end



###############################################################################
# SIMULATION PARAMETERS
###############################################################################

simConfig = {}  # dictionary to store simConfig

# Simulation parameters
simConfig['duration'] = simConfig['tstop'] = $t_end # Duration of the simulation, in ms
simConfig['dt'] = $dt # Internal integration timestep to use
simConfig['randseed'] = 1 # Random seed to use
simConfig['createNEURONObj'] = 1  # create HOC objects when instantiating network
simConfig['createPyStruct'] = 1  # create Python structure (simulator-independent) when instantiating network
simConfig['verbose'] = 1  # show detailed messages 

# Recording 
simConfig['recordTraces'] = True  # whether to record cell traces or not

simConfig['recordDict'] = {'Vsoma':{'sec':'soma','pos':0.5,'var':'v'}}

#foreach ($d in $display )
# Display: $d.name
#foreach ($curve in $d.curves )
# Line: $curve.name: Pop: $curve.population; cell: $curve.population_index; value: $curve.population
###${curve.population}.record('soma(0.5).${curve.ordinate}')

simConfig['plotTracesGids'] = [gids['$curve.population'][$curve.population_index]] # plot recorded traces for this list of cells
#end
#end


simConfig['recordStim'] = True  # record spikes of cell stims
simConfig['recordStep'] = simConfig['dt'] # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting 
simConfig['plotRaster'] = True # Whether or not to plot a raster
simConfig['plotLFPSpectrum'] = False # plot power spectral density
simConfig['maxspikestoplot'] = 3e8 # Maximum number of spikes to plot
simConfig['plotConn'] = False # whether to plot conn matrix
simConfig['plotWeightChanges'] = False # whether to plot weight changes (shown in conn matrix)
simConfig['plot3dArch'] = True # plot 3d architecture




print("Running a NetPyNE based simulation for %sms (dt: %sms)"%(simConfig['duration'], simConfig['dt']))
init.createAndSimulate(                   
    simConfig = simConfig, 
    netParams = netParams)

print("Finished simulation")
