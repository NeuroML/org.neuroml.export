# Main NetPyNE script for: $name

# See https://github.com/Neurosim-lab/netpyne

from netpyne import specs  # import netpyne specs module
from netpyne import sim    # import netpyne sim module

from neuron import h

import sys


#[[###############################################################################]]#
# NETWORK PARAMETERS
#[[###############################################################################]]#

nml2_file_name = '${main_network_file}'

#[[###############################################################################]]#
# SIMULATION PARAMETERS
#[[###############################################################################]]#

simConfig = specs.SimConfig()   # object of class SimConfig to store the simulation configuration

# Simulation parameters
simConfig.duration = simConfig.tstop = $t_end # Duration of the simulation, in ms
simConfig.dt = $dt # Internal integration timestep to use

# Seeds for randomizers (connectivity, input stimulation and cell locations)
# Note: locations and connections should be fully specified by the structure of the NeuroML,
# so seeds for conn & loc shouldn't affect networks structure/behaviour
simConfig.seeds = {'conn': 0, 'stim': $seed, 'loc': 0} 

simConfig.createNEURONObj = 1  # create HOC objects when instantiating network
simConfig.createPyStruct = 1  # create Python structure (simulator-independent) when instantiating network
simConfig.verbose = False  # show detailed messages 
#if ($temperature)
simConfig.hParams['celsius'] = ($temperature - 273.15)
#end

# Recording 
simConfig.recordCells = ['all']  
simConfig.recordTraces = {}

#foreach ($of in $output_file )
# For saving to file: $of.file_name (ref: $of.name)
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; segment id: $oc.segment_id; segment name: $oc.segment_name; Neuron loc: ${oc.neuron_section_name}(${oc.neuron_fract_along}); value: $oc.variable ($oc.neuron_variable_name)
simConfig.recordTraces['${of.name}_${oc.population}_${oc.population_index}_${oc.segment_name}_${oc.neuron_variable_name}'] = {'sec':'${oc.neuron_section_name}','loc':${oc.neuron_fract_along},'var':'$oc.neuron_variable_name','conds':{'pop':'$oc.population','cellLabel':$oc.population_index}}
#end
#end
#end


simConfig.plotCells = ['all']


simConfig.recordStim = True  # record spikes of cell stims
simConfig.recordStep = simConfig.dt # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting, see http://neurosimlab.org/netpyne/reference.html#analysis-related-functions
simConfig.analysis['plotRaster'] = False  # Plot raster
simConfig.analysis['plot2Dnet'] = False  # Plot 2D net cells and connections
simConfig.analysis['plotSpikeHist'] = False # plot spike histogram
simConfig.analysis['plotConn'] = False # plot network connectivity
simConfig.analysis['plotSpikePSD'] = False # plot 3d architecture
simConfig.analysis['plotShape'] = False # plot shape in Neuron

# Saving
simConfig.filename = '${name}.txt'  # Set file output name
simConfig.saveFileStep = simConfig.dt # step size in ms to save data to disk
# simConfig.saveDat = True # save to dat file


#[[###############################################################################]]#
# IMPORT & RUN
#[[###############################################################################]]#

print("Running a NetPyNE based simulation for %sms (dt: %sms) at %s degC"%(simConfig.duration, simConfig.dt, h.celsius))

gids = sim.importNeuroML2SimulateAnalyze(nml2_file_name,simConfig)

print("Finished simulation")


#[[###############################################################################]]#
#   Saving data (this ensures the data gets saved in the format/files 
#   as specified in the LEMS <Simulation> element)
#[[###############################################################################]]#


if sim.rank==0: 
#foreach ($of in $output_file )
    print("Saving traces to file: $of.file_name (ref: $of.name)")

 
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
    # Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; segment id: $oc.segment_id; segment name: $oc.segment_name; value: $oc.variable
    col_${of.name}_$oc.name = sim.allSimData['${of.name}_${oc.population}_${oc.population_index}_${oc.segment_name}_${oc.neuron_variable_name}']['cell_%s'%gids['${oc.population}'][$oc.population_index]]

#else
    # Column: $oc.name
    col_${of.name}_$oc.name = [i*simConfig.dt for i in range(int(simConfig.duration/simConfig.dt))]

#end
#end
    dat_file_$of.name = open('$of.file_name', 'w')
    for i in range(len(col_${of.name}_t)):
        dat_file_${of.name}.write(#foreach ($oc in $of.output_columns ) '%s\t'%(col_${of.name}_${oc.name}[i]/${oc.neuron_variable_scale}) + #end '\n')
    dat_file_${of.name}.close()

#end

#foreach ($of in $spike_file )
    print("Saving spikes to file: $of.file_name (ref: $of.name)")
    file_format = '$of.spike_file_format'
    to_record = {}
#foreach ($oc in $of.event_selections )
    # $oc.event_selection_id: Pop: $oc.population; cell: $oc.population_index; segment id: $oc.segment_id; segment name: $oc.segment_name; value: $oc.variable
#if ($oc.segment_id)
    assert $oc.segment_id==0 # Only able to record events at soma (seg_id = 0)
#end
    to_record[gids['${oc.population}'][$oc.population_index]] = $oc.event_selection_id
#end

    spike_file_$of.name = open('$of.file_name', 'w')
    to_record_keys = to_record.keys()
    for t, id in zip(sim.allSimData['spkt'],sim.allSimData['spkid']):
        if id in to_record_keys:
            if file_format=='ID_TIME':
                spike_file_${of.name}.write('%i\t%s\n'%(to_record[id],t/1000.))
            elif file_format=='TIME_ID':
                spike_file_${of.name}.write('%s\t%i\n'%(t/1000.,to_record[id]))
    spike_file_${of.name}.close()


#end


    print("Saved all data.")

if '-nogui' in sys.argv:
    quit()
