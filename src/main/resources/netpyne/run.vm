# Main NetPyNE script for: $name

# See https://github.com/Neurosim-lab/netpyne

from netpyne import specs  # import netpyne specs module
from netpyne import sim    # import netpyne sim module


#[[###############################################################################]]#
# NETWORK PARAMETERS
#[[###############################################################################]]#

nml2_file_name = '${main_network_file}'


#[[###############################################################################]]#
# SIMULATION PARAMETERS
#[[###############################################################################]]#

simConfig = specs.SimConfig()   # object of class SimConfig to store the simulation configuration

# Simulation parameters
simConfig.duration = simConfig.tstop = $t_end # Duration of the simulation, in ms
simConfig.dt = $dt # Internal integration timestep to use
simConfig.randseed = 1 # Random seed to use
simConfig.createNEURONObj = 1  # create HOC objects when instantiating network
simConfig.createPyStruct = 1  # create Python structure (simulator-independent) when instantiating network
simConfig.verbose = True  # show detailed messages 

# Recording 
simConfig.recordCells = ['all']  
simConfig.recordTraces = {'Vsoma':{'sec':'soma','loc':0.5,'var':'v'}}

simConfig.plotCells = ['all']


simConfig.recordStim = True  # record spikes of cell stims
simConfig.recordStep = simConfig.dt # Step size in ms to save data (eg. V traces, LFP, etc)



# Analysis and plotting 
simConfig.plotRaster = True # Whether or not to plot a raster
simConfig.plotLFPSpectrum = False # plot power spectral density
simConfig.maxspikestoplot = 3e8 # Maximum number of spikes to plot
simConfig.plotConn = False # whether to plot conn matrix
simConfig.plotWeightChanges = False # whether to plot weight changes (shown in conn matrix)
#simConfig.plot3dArch = True # plot 3d architecture

# Saving
simConfig.filename = '${name}.txt'  # Set file output name
simConfig.saveFileStep = simConfig.dt # step size in ms to save data to disk
simConfig.saveDat = True # save to dat file


#[[###############################################################################]]#
# IMPORT & RUN
#[[###############################################################################]]#

print("Running a NetPyNE based simulation for %sms (dt: %sms)"%(simConfig.duration, simConfig.dt))

gids = sim.importNeuroML2SimulateAnalyze(nml2_file_name,simConfig)

print("Finished simulation")


#[[###############################################################################]]#
#   Saving data
#[[###############################################################################]]#

#foreach ($of in $output_file )
print("Saving to file: $of.file_name (ref: $of.name)")
 
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; value: $oc.variable

# {oc.population}_segment =  ${oc.population}.get_data().segments[0]
# ${oc.population}_${oc.variable}_data = next((x for x in ${oc.population}_segment.analogsignalarrays if x.name == 'soma(0.5).${oc.variable}'), None)
# ${of.name}_${oc.name}_${oc.variable} = [${oc.population}_${oc.variable}_data.T[$oc.population_index].simplified] # 'simplified' converts to SI units
# ${of.name}_data = np.concatenate((${of.name}_data, ${of.name}_${oc.name}_${oc.variable}))

#else
# Column: $oc.name
#t = np.arange(0,(sim.tstop+($dt/2))/1000.,$dt/1000.)
#${of.name}_data = np.array([t])
#end
#end
#    np.savetxt('$of.file_name', ${of.name}_data.T, delimiter='\t',fmt='%s')
#end

print("Saved data.")
