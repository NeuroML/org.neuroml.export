# Main PyNN script for: $name

from pyNN.utility import get_simulator, init_logging
import numpy as np

sim, options = get_simulator(("--plot-figure", "Plot the simulation results to a file.", {"action": "store_true"}),
                             ("--debug", "Print debugging information"))

if options.debug:
    init_logging(None, debug=True)

sim.tstop = $t_end

sim.setup(timestep=$dt)

#foreach ($pop in $populations.keySet() )
#foreach ($pop_element in $populations.get($pop).keySet())
#if ($pop_element=="component")
#set($component_array=$populations.get($pop).get($pop_element))
#foreach ($component_element in $component_array.keySet())
#if ($component_element=="parameters")
#set($parameters_array=$component_array.get($component_element))

cell_params_$component_array.name = {
#foreach($parameter in $parameters_array.keySet())     '$parameter':$parameters_array.get($parameter), 
#end
} #end
#end
#end
#end
#end


#foreach ($pop in $populations.keySet() )
#set($pop_size=$populations.get($pop).size)
#set($pop_component=$populations.get($pop).component.name)

# Population: $pop, size: $pop_size, component: $pop_component
from ${pop_component}_celldefinition import ${pop_component}Type
#from ${pop_component}_celldefinition import ${pop_component}
$pop = sim.Population($pop_size, ${pop_component}Type(**cell_params_$pop_component), label="pop_$pop")

#end

# Inputs...
#foreach ($input_ref in $inputs.keySet() )
#set($input=$inputs.get($input_ref))
# Input: $input_ref which is ${input.component.name} on cell ${input.population_index} in ${input.population}
from ${input.component.name}_inputdefinition import ${input.component.name}
${input_ref}_${input.population}_${input.population_index} = ${input.component.name}( #foreach($p in $input.component.parameters.keySet()) $p=$input.component.parameters.get($p), #end )
${input_ref}_${input.population}_${input.population_index}.inject_into([${input.population}[${input.population_index}]])

#end


print("Running a PyNN based simulation in %s for %sms (dt: %sms)"%(options.simulator.upper(), sim.tstop, sim.get_time_step()))

recorded = []

#foreach ($d in $display )
# Display: $d.name
#foreach ($curve in $d.curves )
# Line: $curve.name: Pop: $curve.population; cell: $curve.population_index; value: $curve.population
if not 'soma(0.5).${curve.ordinate}' in recorded:
    ${curve.population}.record('soma(0.5).${curve.ordinate}')
    recorded.append('soma(0.5).${curve.ordinate}')
#end
#end

#foreach ($of in $output_file )
# Output file: $of.file_name
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; value: $oc.variable
if not 'soma(0.5).${oc.variable}' in recorded: 
    ${oc.population}.record('soma(0.5).${oc.variable}')
    recorded.append('soma(0.5).${oc.variable}')
#end
#end
#end


sim.run(sim.tstop)

#foreach ($of in $output_file )
print("Saving to file: $of.file_name (ref: $of.name)")
 
#foreach ($oc in $of.output_columns )
#if ($oc.name!="t")
# Column: $oc.name: Pop: $oc.population; cell: $oc.population_index; value: $oc.variable
segment =  ${oc.population}.get_data().segments[0]
${of.name}_${oc.variable} = [next((x for x in segment.analogsignalarrays if x.name == 'soma(0.5).${oc.variable}'), None).T[$oc.population_index]]
${of.name}_data = np.concatenate((${of.name}_data, ${of.name}_${oc.variable}))
#else
# Column: $oc.name
t = np.arange(0,sim.tstop+($dt/2),$dt)
${of.name}_data = np.array([t])
#end
#end
np.savetxt('$of.file_name', ${of.name}_data.T, delimiter=',',fmt='%s')
#end

if options.plot_figure:
    import matplotlib.pyplot as plt
#foreach ($d in $display )
    # Display: $d.name: $d.title
    print("Display ($d.name): $d.title")
    plt.figure("${d.title}")
#foreach ($curve in $d.curves )
    # Line: $curve.name: Pop: $curve.population; cell: $curve.population_index; value: $curve.ordinate
    segment =  ${curve.population}.get_data().segments[0]
    vm = next((x for x in segment.analogsignalarrays if x.name == 'soma(0.5).${curve.ordinate}'), None)
    ts = [i*sim.get_time_step() for i in xrange(len(vm))]
    plt.plot(ts, vm, '-', label='${curve.name}')
#end
    plt.legend()
#end
    plt.show()

sim.end()