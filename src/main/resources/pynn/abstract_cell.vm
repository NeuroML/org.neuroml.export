# Cell file for Component: $name

print("Loading cell file for $name")

## Bad!!  NEURON specific
from pyNN.neuron import NativeCellType
from neuron import h
from neuron import nrn


class $name(object):

    def __init__(self, **parameters):
        print("Created instance of $name with params: %s"%parameters)

        self.soma = nrn.Section('sec_${name}')
        #h(" forall psection() ")

        self.soma.L = 10.0
        self.soma(0.5).diam = 10.0
        # Todo: work this out here from area etc.
        self.soma(0.5).cm = (318309*parameters['C'] if parameters.has_key('C') else 318.31927 )
        self.soma.push()
        self.mechanism = h.$name(0.5, sec=self.soma)

#foreach ($param in $parameters.keySet() )
        self.mechanism.${param} = parameters['${param}']
#end

        self.source = self.soma(0.5)._ref_v

        # needed for PyNN
        self.source_section = self.soma
        self.parameter_names = (#foreach ($param in $parameters.keySet() ) '$param', #end)
        self.traces = {}
        self.recording_time = False

#foreach ($param in $parameters.keySet() )
    # Getter/setter for $param
    def _set_${param}(self, value):
        print("Setting $param in ${name} to %s"%value)
        self.mechanism.${param} = value
    def _get_${param}(self):
        return self.mechanism.${param}
    ${param} = property(fget=_get_${param}, fset=_set_${param})

#end

    def memb_init(self):

#foreach ($s in $state.keySet() )
        # Initialising state $s
#if ($s=="v")
        for seg in self.soma:
            seg.$s = self.get_value('$state.get($s)')
#else
        self.mechanism.$s = self.get_value('$state.get($s)')
#end
#end

    def get_value(self, val_string):
        if val_string=='v':
            return self.soma(0.5)._ref_v
        if val_string.isdigit():
            return float(val_string) 
        else:
            return getattr(self.mechanism,val_string)


class ${name}Type(NativeCellType):

    default_parameters = {#foreach ($param in $parameters.keySet() ) '$param':$parameters.get($param), #end}
    default_initial_values = {}    
    recordable = [#foreach ($s in $state.keySet() ) 'soma(0.5).$s', #end]
    units = {'soma(0.5).v' : 'mV'}
    receptor_types = []
    model = $name

